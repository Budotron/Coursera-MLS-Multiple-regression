require (read.csv)
salesData <- read.csv("/Users/varunboodram//Volumes/Media and Stuff/code/coursera MLS/home_data.csv")
require (read.csv)
salesData <- read.csv("/Users/varunboodram/Volumes/Media and Stuff/code/coursera MLS/home_data.csv")
require (read.csv)
salesData <- read.csv("/Volumes/Media and Stuff/code/coursera MLS/home_data.csv")
biggest_sd_zip
require(reshape2)
meltedSales <- melt(data = salesData, id.vars = "zipcode", measure.vars = "price")
zipcodes <- unique(x = meltedSales$zipcode)
avgs<-as.vector("numeric")
count <- 0
for (i in zipcodes){
count <- count + 1
print(count)
avgs[count]<-mean(meltedSales[meltedSales$zipcode==i,]$value)
}
avgs<-as.numeric(avgs)
maxInd<-which.max(avgs)
biggest_avg_price_zip <- zipcodes[maxInd]
mean(meltedSales[meltedSales$zipcode == biggest_avg_price_zip, ]$value)
require(reshape2)
meltedSales <- melt(data = salesData, id.vars = "zipcode", measure.vars = "price")
zipcodes <- unique(x = meltedSales$zipcode)
avgs<-as.vector("numeric")
count <- 0
for (i in zipcodes){
count <- count + 1
avgs[count]<-mean(meltedSales[meltedSales$zipcode==i,]$value)
}
avgs<-as.numeric(avgs)
maxInd<-which.max(avgs)
biggest_avg_price_zip <- zipcodes[maxInd]
mean(meltedSales[meltedSales$zipcode == biggest_avg_price_zip, ]$value)
require(reshape2)
meltedSales <- melt(data = salesData, id.vars = "zipcode", measure.vars = "price")
zipcodes <- unique(x = meltedSales$zipcode)
devs<-as.vector("numeric")
count <- 0
for (i in zipcodes){
print(count)
devs[count]<-sd(meltedSales[meltedSales$zipcode==i,]$value)
}
devs<-as.numeric(devs)
maxInd<-which.max(devs)
biggest_sd_zip <- zipcodes[maxInd]
mean(meltedSales[meltedSales$zipcode == biggest_sd_zip, ]$value)
log2(14)
log2(16)
log10(16)
install.packages("rPython")
install.packages("openintro")
data(cars)
dotPlot(cars$price, cars$type, key=c('large', 'midsize', 'small'), cex=1:3)
library(openintro)
data(cars)
dotPlot(cars$price, cars$type, key=c('large', 'midsize', 'small'), cex=1:3)
data(cars)
dotPlot(cars$price, cars$type, key=c( 'midsize'), cex=1:3)
data(cars)
dotPlot(cars$price, cars$type, key=c( 'midsize'), cex=1:3, col="blue")
data(run10)
layout(matrix(1:2,2), heights=c(2.7,1.5))
par(las=1)
these <- run10$gender=='M'
dotPlot(run10$time[these], run10$div[these],
col=fadeColor('black', '11'))
install.packages("RHadoop")
install.packages(c("rJava", "RJSONIO", "rmr", "rhdfs", "rhbase", "plyrmr"), repos="http://cran.r-project.org/")
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
r <- getOption('repos')
r$IRkernel <- 'http://irkernel.github.io/'
options(repos = r)
IRkernel::installspec(user = FALSE)
IRkernel::installspec()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')),
type = 'source')
IRkernel::installspec(user = FALSE)
install.packages("ridge")
setwd("~/Desktop/Coursera-MLS-Multiple-regression/03 Ridge regression")
train_data <- read.csv(unzip(zipfile="./datasets/wk3_kc_house_train_data.csv.zip"),
header = T,
sep = ",",
quote = " ",
stringsAsFactors = T )
data<-poly_dataframe(dataframe = train_data,
output = "price",
feature = "sqft_living",
degree = 15)
fit<-linearRidge(formula = output~., data = data, lambda = 1.5e-5)
---
title: "Ridge Regression: Exploring $L2$ Penalties"
author: "Varun Boodram"
date: "December 28, 2015"
output:
html_document:
theme: cerulean
pdf_document: default
---
*Copy and paste an equivalent of ‘polynomial_sframe’ function from Module 3 (Polynomial Regression). This function accepts an array ‘feature’ (of type pandas.Series) and a maximal ‘degree’ and returns an data frame (of type pandas.DataFrame) with the first column equal to ‘feature’ and the remaining columns equal to ‘feature’ to increasing integer powers up to ‘degree’.*
```{r}
## poly_dataframe() accepts as input a data frame, a feature (the name of a single column in that data frame, wrapped in " "), and a degree, and returns a data frame whose consecutive columns are powers of the values of the feature, in increasing order up to the value of the entered degree
poly_dataframe <- function(dataframe, output, feature, degree){
poly <- matrix(nrow = nrow(dataframe), ncol = degree)
names<-vector()
if (degree == 1){
poly[,1] <- dataframe[[feature]]
poly <- as.data.frame(poly)
colnames(poly) <- "power_1"
} else {
columns <- vector()
for (i in 1: degree){
names[i] <- paste("power_", i, sep = "")
poly[, i] <- dataframe[[feature]]^i
poly <- as.data.frame(poly)
colnames(poly) <- names
}
}
poly <-cbind(dataframe[[output]], poly)
colnames(poly)[1]<-"output"
poly
}
```
*For the remainder of the assignment we will be working with the house Sales data as in Module 3 (Polynomial Regression). Load in the data and also sort the sales data frame by ‘sqft_living’. When we plot the fitted values we want to join them up in a line and this works best if the variable on the X-axis (which will be ‘sqft_living’) is sorted. For houses with identical square footage, we break the tie by their prices.*
The data were downloaded from the assignment webpage and stored in the current working directory.
```{r, cache=TRUE, echo=FALSE}
setwd("~/Desktop/Coursera-MLS-Multiple-regression/03 Ridge regression")
train_data <- read.csv(unzip(zipfile="./datasets/wk3_kc_house_train_data.csv.zip"),
header = T,
sep = ",",
quote = " ",
stringsAsFactors = T )
test_data <- read.csv(unzip(zipfile="./datasets/wk3_kc_house_test_data.csv.zip"),
header = T,
sep = ",",
quote = " ",
stringsAsFactors = T )
```
The classes of each column in both data sets were adjusted to reflect the classes needed for this assignment
```{r, echo=FALSE, cache=TRUE}
# fix the training data
train_data$bathrooms<-as.numeric(train_data$bathrooms)
train_data$waterfront<-as.integer(train_data$waterfront)
train_data$sqft_above<-as.integer(train_data$sqft_above)
train_data$sqft_living15<-as.numeric(train_data$sqft_living15)
train_data$grade<-as.integer(train_data$grade)
train_data$yr_renovated<-as.integer(train_data$yr_renovated)
train_data$price<-as.numeric(train_data$price)
train_data$bedrooms<-as.numeric(train_data$bedrooms)
train_data$zipcode<-as.character(train_data$zipcode)
train_data$long<-as.numeric(train_data$long)
train_data$sqft_lot15<-as.numeric(train_data$sqft_lot15)
train_data$sqft_living<-as.numeric(train_data$sqft_living)
train_data$floors<-as.character(train_data$floors)
train_data$condition<-as.integer(train_data$condition)
train_data$lat<-as.numeric(train_data$lat)
train_data$date<-as.character(train_data$date)
train_data$sqft_basement<-as.integer(train_data$sqft_basement)
train_data$yr_built<-as.integer(train_data$yr_built)
train_data$id<-as.character(train_data$id)
train_data$sqft_lot<-as.integer(train_data$sqft_lot)
train_data$view<-as.integer(train_data$view)
# fix the testing data
test_data$bathrooms<-as.numeric(test_data$bathrooms)
test_data$waterfront<-as.integer(test_data$waterfront)
test_data$sqft_above<-as.integer(test_data$sqft_above)
test_data$sqft_living15<-as.numeric(test_data$sqft_living15)
test_data$grade<-as.integer(test_data$grade)
test_data$yr_renovated<-as.integer(test_data$yr_renovated)
test_data$price<-as.numeric(test_data$price)
test_data$bedrooms<-as.numeric(test_data$bedrooms)
test_data$zipcode<-as.character(test_data$zipcode)
test_data$long<-as.numeric(test_data$long)
test_data$sqft_lot15<-as.numeric(test_data$sqft_lot15)
test_data$sqft_living<-as.numeric(test_data$sqft_living)
test_data$floors<-as.character(test_data$floors)
test_data$condition<-as.integer(test_data$condition)
test_data$lat<-as.numeric(test_data$lat)
test_data$date<-as.character(test_data$date)
test_data$sqft_basement<-as.integer(test_data$sqft_basement)
test_data$yr_built<-as.integer(test_data$yr_built)
test_data$id<-as.character(test_data$id)
test_data$sqft_lot<-as.integer(test_data$sqft_lot)
test_data$view<-as.integer(test_data$view)
```
The function ```tie_Break()``` sorts the data in ascending value of an input feature, breaking ties between the same input value with ascending values of the desired output.
```{r}
tie_Break <- function(dataframe, feature, output){
dataframe<-dataframe[with(dataframe, order(dataframe[[feature]], dataframe[[output]])),]
dataframe
}
```
*Let us revisit the 15th-order polynomial model using the 'sqft_living' input. Generate polynomial features up to degree 15 using `polynomial_sframe()` and fit a model with these features. When fitting the model, use an L2 penalty of 1.5e-5:*
```{r}
data<-poly_dataframe(dataframe = train_data,
output = "price",
feature = "sqft_living",
degree = 15)
fit<-linearRidge(formula = output~., data = data, lambda = 1.5e-5)
```
##### Quiz Question:
*What’s the learned value for the coefficient of feature power_1?*
```{r}
coef(fit)[2]
```
head(poly_dataframe())
]
head(data)
coef(fit)[2]
coef(fit)
library(ridge)
fit<-linearRidge(formula = output~., data = data, lambda = 1.5e-5)
coef(fit)
plot(x = data$power_1,
y = data$output,
pch=20,
xlab = "x",
ylab = "y",
main = paste("Degree", degree, "fit"))
lines(x = x, y <- sin(4*x))
points(dataframe[[feature]],
predict(fit),
type ="l",
col ="red",
lwd =3)
print(coef(fit))
points(data[[output]],
predict(fit),
type ="l",
col ="red",
lwd =3)
names(data)
points(data$output,
predict(fit),
type ="l",
col ="red",
lwd =3)
plot(x = data$power_1,
y = data$output,
pch=20,
xlab = "x",
ylab = "y",
main = paste("Degree", degree, "fit"))
lines(x = x, y <- sin(4*x))
points(data$output,
predict(fit),
type ="l",
col ="red",
lwd =3)
print(coef(fit))
head(predict(fir))
head(predict(fit))
points(data$power_1,
predict(fit),
type ="l",
col ="red",
lwd =3)
plot(x = data$power_1,
y = data$output,
pch=20,
xlab = "x",
ylab = "y",
main = paste("Degree", degree, "fit"))
lines(x = x, y <- sin(4*x))
points(data$power_1,
predict(fit),
type ="l",
col ="red",
lwd =3)
print(coef(fit))
head(cbind(data$power_1), predict(fit))
dim(data)
length(predict(fit))
plot(x = data$power_1,
y = data$output,
pch=20,
xlab = "x",
ylab = "y",
main = paste("Degree", 15, "fit"))
points(data$power_1,
predict(fit),
type ="l",
col ="red",
lwd =3)
print(coef(fit))
ridgefit<-function(dataframe, output, feature, degree, l2_penalty){
data <- poly_dataframe(dataframe = dataframe,
output = output,
feature = feature,
degree = degree)
fit <- linearRidge(formula = output~.,
data = data,
lambda = l2_penalty)
plot(x = data$power_1,
y = data$output,
pch=20,
xlab = "x",
ylab = "y",
main = paste("Degree", degree, "fit"))
points(dataframe[[feature]],
predict(fit),
type ="l",
col ="red",
lwd =3)
print(coef(fit))
}
ridgefit(dataframe = train_data, output = "price", feature = "sqft_living", degree = 15, l2_penalty = 1.5e-5)
coeffs1 <- ridgefit(dataframe = tie_Break(dataframe = subset1,
feature = "sqft_living",
output = "price"),
output = "price",
feature = "sqft_living",
degree = 15,
l2_penalty = 1.23e2)
subset1 <-read.csv(unzip(zipfile="./datasets/wk3_kc_house_set_1_data.csv.zip"),
header = T,
sep = ",",
quote = " ",
stringsAsFactors = T )
subset2 <-read.csv(unzip(zipfile="./datasets/wk3_kc_house_set_2_data.csv.zip"),
header = T,
sep = ",",
quote = " ",
stringsAsFactors = T )
subset3 <-read.csv(unzip(zipfile="./datasets/wk3_kc_house_set_3_data.csv.zip"),
header = T,
sep = ",",
quote = " ",
stringsAsFactors = T )
subset4 <-read.csv(unzip(zipfile="./datasets/wk3_kc_house_set_4_data.csv.zip"),
header = T,
sep = ",",
quote = " ",
stringsAsFactors = T )
```
```{r, echo = FALSE}
subset1$bathrooms<-as.numeric(subset1$bathrooms)
subset1$waterfront<-as.integer(subset1$waterfront)
subset1$sqft_above<-as.integer(subset1$sqft_above)
subset1$sqft_living15<-as.numeric(subset1$sqft_living15)
subset1$grade<-as.integer(subset1$grade)
subset1$yr_renovated<-as.integer(subset1$yr_renovated)
subset1$price<-as.numeric(subset1$price)
subset1$bedrooms<-as.numeric(subset1$bedrooms)
subset1$zipcode<-as.character(subset1$zipcode)
subset1$long<-as.numeric(subset1$long)
subset1$sqft_lot15<-as.numeric(subset1$sqft_lot15)
subset1$sqft_living<-as.numeric(subset1$sqft_living)
subset1$floors<-as.character(subset1$floors)
subset1$condition<-as.integer(subset1$condition)
subset1$lat<-as.numeric(subset1$lat)
subset1$date<-as.character(subset1$date)
subset1$sqft_basement<-as.integer(subset1$sqft_basement)
subset1$yr_built<-as.integer(subset1$yr_built)
subset1$id<-as.character(subset1$id)
subset1$sqft_lot<-as.integer(subset1$sqft_lot)
subset1$view<-as.integer(subset1$view)
subset2$bathrooms<-as.numeric(subset2$bathrooms)
subset2$waterfront<-as.integer(subset2$waterfront)
subset2$sqft_above<-as.integer(subset2$sqft_above)
subset2$sqft_living15<-as.numeric(subset2$sqft_living15)
subset2$grade<-as.integer(subset2$grade)
subset2$yr_renovated<-as.integer(subset2$yr_renovated)
subset2$price<-as.numeric(subset2$price)
subset2$bedrooms<-as.numeric(subset2$bedrooms)
subset2$zipcode<-as.character(subset2$zipcode)
subset2$long<-as.numeric(subset2$long)
subset2$sqft_lot15<-as.numeric(subset2$sqft_lot15)
subset2$sqft_living<-as.numeric(subset2$sqft_living)
subset2$floors<-as.character(subset2$floors)
subset2$condition<-as.integer(subset2$condition)
subset2$lat<-as.numeric(subset2$lat)
subset2$date<-as.character(subset2$date)
subset2$sqft_basement<-as.integer(subset2$sqft_basement)
subset2$yr_built<-as.integer(subset2$yr_built)
subset2$id<-as.character(subset2$id)
subset2$sqft_lot<-as.integer(subset2$sqft_lot)
subset2$view<-as.integer(subset2$view)
subset3$bathrooms<-as.numeric(subset3$bathrooms)
subset3$waterfront<-as.integer(subset3$waterfront)
subset3$sqft_above<-as.integer(subset3$sqft_above)
subset3$sqft_living15<-as.numeric(subset3$sqft_living15)
subset3$grade<-as.integer(subset3$grade)
subset3$yr_renovated<-as.integer(subset3$yr_renovated)
subset3$price<-as.numeric(subset3$price)
subset3$bedrooms<-as.numeric(subset3$bedrooms)
subset3$zipcode<-as.character(subset3$zipcode)
subset3$long<-as.numeric(subset3$long)
subset3$sqft_lot15<-as.numeric(subset3$sqft_lot15)
subset3$sqft_living<-as.numeric(subset3$sqft_living)
subset3$floors<-as.character(subset3$floors)
subset3$condition<-as.integer(subset3$condition)
subset3$lat<-as.numeric(subset3$lat)
subset3$date<-as.character(subset3$date)
subset3$sqft_basement<-as.integer(subset3$sqft_basement)
subset3$yr_built<-as.integer(subset3$yr_built)
subset3$id<-as.character(subset3$id)
subset3$sqft_lot<-as.integer(subset3$sqft_lot)
subset3$view<-as.integer(subset3$view)
subset4$bathrooms<-as.numeric(subset4$bathrooms)
subset4$waterfront<-as.integer(subset4$waterfront)
subset4$sqft_above<-as.integer(subset4$sqft_above)
subset4$sqft_living15<-as.numeric(subset4$sqft_living15)
subset4$grade<-as.integer(subset4$grade)
subset4$yr_renovated<-as.integer(subset4$yr_renovated)
subset4$price<-as.numeric(subset4$price)
subset4$bedrooms<-as.numeric(subset4$bedrooms)
subset4$zipcode<-as.character(subset4$zipcode)
subset4$long<-as.numeric(subset4$long)
subset4$sqft_lot15<-as.numeric(subset4$sqft_lot15)
subset4$sqft_living<-as.numeric(subset4$sqft_living)
subset4$floors<-as.character(subset4$floors)
subset4$condition<-as.integer(subset4$condition)
subset4$lat<-as.numeric(subset4$lat)
subset4$date<-as.character(subset4$date)
subset4$sqft_basement<-as.integer(subset4$sqft_basement)
subset4$yr_built<-as.integer(subset4$yr_built)
subset4$id<-as.character(subset4$id)
subset4$sqft_lot<-as.integer(subset4$sqft_lot)
subset4$view<-as.integer(subset4$view)
coeffs1 <- ridgefit(dataframe = tie_Break(dataframe = subset1,
feature = "sqft_living",
output = "price"),
output = "price",
feature = "sqft_living",
degree = 15,
l2_penalty = 1.23e2)
ridgefit<-function(dataframe, output, feature, degree, l2_penalty){
data <- poly_dataframe(dataframe = dataframe,
output = output,
feature = feature,
degree = degree)
fit <- linearRidge(formula = output~.,
data = data,
lambda = l2_penalty)
plot(x = data$power_1,
y = data$output,
pch=20,
xlab = "Square feet",
ylab = "Price",
main = paste("Degree", degree, "ridge regression fit with penalty ", l2_penalty))
points(data$power_1,
predict(fit),
type ="l",
col ="red",
lwd =3)
print(coef(fit))
}
coeffs1 <- ridgefit(dataframe = tie_Break(dataframe = subset1,
feature = "sqft_living",
output = "price"),
output = "price",
feature = "sqft_living",
degree = 15,
l2_penalty = 1e-9)
ridgefit<-function(dataframe, output, feature, degree, l2_penalty){
data <- poly_dataframe(dataframe = dataframe,
output = output,
feature = feature,
degree = degree)
fit <- linearRidge(formula = output~.,
data = data,
lambda = l2_penalty)
plot(x = data$power_1,
y = data$output,
pch=20,
xlab = "Square feet",
ylab = "Price",
main = paste("Degree", degree, "ridge regression fit with penalty ", l2_penalty))
points(data$power_1,
predict(fit),
type ="l",
col ="red",
lwd =3)
print(coef(fit))
}
coeffs1 <- ridgefit(dataframe = tie_Break(dataframe = subset1,
feature = "sqft_living",
output = "price"),
output = "price",
feature = "sqft_living",
degree = 15,
l2_penalty = 1e-9)
coeffs2 <- ridgefit(dataframe = tie_Break(dataframe = subset2,
feature = "sqft_living",
output = "price"),
output = "price",
feature = "sqft_living",
degree = 15,
l2_penalty = 1e-9)
coeffs3 <- ridgefit(dataframe = tie_Break(dataframe = subset3,
feature = "sqft_living",
output = "price"),
output = "price",
feature = "sqft_living",
degree = 15,
l2_penalty = 1e-9)
coeffs4 <- ridgefit(dataframe = tie_Break(dataframe = subset4,
feature = "sqft_living",
output = "price"),
output = "price",
feature = "sqft_living",
degree = 15,
l2_penalty = 1e-9)
shuffled <- read.csv(unzip(zipfile="./datasets/wk3_kc_house_train_valid_shuffled.csv.zip"),
header = T,
sep = ",",
quote = " ",
stringsAsFactors = T )
setwd("~/Desktop/Coursera-MLS-Multiple-regression/03 Ridge regression")
