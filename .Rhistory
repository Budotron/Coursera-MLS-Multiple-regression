# Get the data, unless this step has already been done
dest<-paste("./", dirName,"/", filename, ext, sep = "")
if(!file.exists(dest)){
download.file(url = fileUrl, destfile = dest,
method = "curl")
datedownloaded<-date()
}
dest
}
fileURL<-"http://eventing.coursera.org/api/redirectStrict/H8HMiUmxlHgR7iCFnfiEA_XSBwAsZYLDRxXDYBa4UsdYooAvBjkRw8odfoQlfEwcXcfDV_6_cVnYS8m7xgFsgA.pL-dRICVmc-0nup0aEAE0w.ZLixzwo0zmTk6gev-BL7MViybtmMW-6qZznwPCjMGswnyl2oAUvyF7VV644GYCKjBzGqGsdRZVQfzqSWs-bmOgSMltoKaBEIXBHbpeAhfU0NcBLfv8U2hPra3wEd521fr038WjlU6ZTe9MVhBHPrgfMcfD4M23S7szprWzeMF5YlfEEBHujlHkiS1fwERUidz-yz0wMxE6mwzk5EdQEPrGz82wQ95sCYvAqv6F8JEiDLKsEXzjI2QnpZr0V_mRfd8sYPY8YYSVXyTsDfDe-dCGJvDUDf53aME_SWltAy3czf3rotU4dxAjUIXTG3l_LuSdL0kprGGQAgHMBQkDpeShS0XxG1rj2BfTU1ARtYTj0Rs70vjaQSWGSNq4uvuzSu"
temp<-getdata(fileUrl = fileURL, dir = "SalesData",
filename = "sales", ext = ".csv")
salesData<-read.csv(temp)
```
salesData <- read.csv("/Users/varunboodram/Desktop/home_data.csv")
head(salesData)
?boxplot
head(salesData[price])
names(salesData)
class(salesData)
head(salesData[,price])
head(salesData[,"price"])
boxplot(price, zipcode, data = salesData)
attach(salesData)
boxplot(price, zipcode, data = salesData)
require(ggplot2)
install.packages("ggplot2")
require(ggplot2)
g<-ggplot(data = salesData, aes(x = price, y = zipcode), )+geom_boxplot()
g
g<-ggplot(data = salesData, aes(x = zipcode, y = price), )+geom_boxplot()
g
g<-ggplot(data = salesData, aes(x = zipcode, y = price), )+geom_boxplot()+facet_wrap(zipcode)
g
g<-ggplot(data = salesData, aes(x = factor(zipcode), y = price), )+geom_boxplot()+facet_wrap(zipcode)
g
g<-ggplot(data = salesData, aes(x = factor(zipcode), y = price), )+geom_boxplot()
g
?dplyr
?melt
library(reshape2)
meltedSales<-melt(data = salesData, measure.vars = zipcode, variable.name = price)
meltedSales<-melt(data = salesData, id.vars =  zipcode, measure.vars = price)
meltedSales<-melt(data = salesData, id.vars =  zipcode, measure.vars = price)
meltedSales<-melt(data = salesData, id.vars =  "zipcode", measure.vars = "price")
head(meltedSales)
head(meltedSales["zipcode"==98178])
head(meltedSales["zipcode"==98178,])
head(meltedSales[zipcode==98178,])
head(meltedSales[zipcode==98040,])
mean(meltedSales[zipcode==98040,]$value)
sd(meltedSales[zipcode==98040,]$value)
sd(meltedSales[zipcode==98178,])
sd(meltedSales[zipcode==98178,]$value)
dim(meltedSales)
unique()
head(unique(meltedSales$zipcode))
zipcodes <- unique(x = meltedSales$zipcode)
devs<-vector()
for (i in zipcodes){
devs<-sd(meltedSales[zipcode=i]$value)
}
devs
devs<-vector()
for (i in zipcodes){
devs<-sd(meltedSales[zipcode==i]$value)
}
devs
devs<-vector()
for (i in zipcodes){
devs<-sd(meltedSales[zipcode==i,]$value)
}
devs
zipcodes
test <- c(2,4,6)
for (i in test){}
for (i in test){print(i +3)}
?sd
class(meltedSales[zipcode==98001,]$value)
head(meltedSales[zipcode==98001,]$value)
class(as.vector(meltedSales[zipcode==98001,]$value))
class(as.vector(meltedSales[zipcode==98001,]$value), numeric)
class(as.vector(meltedSales[zipcode==98001,]$value, numeric))
class(as.numeric(meltedSales[zipcode==98001,]$value))
head(as.numeric(meltedSales[zipcode==98001,]$value))
zipcodes <- unique(x = meltedSales$zipcode)
devs<-vector()
for (i in zipcodes){
devs<-sd(as.numeric(meltedSales[zipcode==i,]$value))
}
devs
devs<-vector()
devs
devs<-as.vector()
devs<-as.vector(length(zipcodes))
devs
devs<-as.vector(length(zipcodes))
count <- 0
for (i in zipcodes){
count < count + 1
devs[count]<-sd(as.numeric(meltedSales[zipcode==i,]$value))
}
devs
devs<-as.vector("numeric")
count <- 0
for (i in zipcodes){
count < count + 1
devs[count]<-sd(as.numeric(meltedSales[zipcode==i,]$value))
}
devs
devs<-as.vector("numeric")
count <- 0
for (i in zipcodes){
count < count + 1
print(count)
devs[count]<-sd(as.numeric(meltedSales[zipcode==i,]$value))
}
for (i in zipcodes){
print(i)
count < count + 1
print(count)
devs[count]<-sd(as.numeric(meltedSales[zipcode==i,]$value))
}
devs<-as.vector("numeric")
count <- 0
for (i in zipcodes){
count <- count + 1
print(count)
devs[count]<-sd(as.numeric(meltedSales[zipcode==i,]$value))
}
devs
devs[max(devs)]
max(devs)
class(devs)
devs<-as.numeric(devs)
devs
devs[max(devs)]
max(devs)
which.max(devs)
rbind(zipcodes, devs)
class(rbind(zipcodes, devs))
devs<-as.vector("numeric")
count <- 0
for (i in zipcodes){
count <- count + 1
print(count)
devs[count]<-sd(as.numeric(meltedSales[zipcode==i,]$value))
}
devs
devs<-as.numeric(devs)
maxInd<-which.max(devs)
zipcodes[maxInd]
mean(meltedSales[zipcode == maxInd, ]$value)
meltedSales[zipcode == maxInd, ]$value
biggest_sd_zip <- zipcodes[maxInd]
mean(meltedSales[zipcode == biggest_sd_zip, ]$value)
---
title: 'Machine Learning: regression'
author: "Varun Boodram"
date: "October 21, 2015"
output: html_document
---
```{r}
require (read.csv)
salesData <- read.csv("/Users/varunboodram/Desktop/home_data.csv")
```
1. Selection and summary statistics: We found the zip code with the highest average house price. What is the average house price of that zip code?
```{r}
require(ggplot2)
g <- ggplot(data = salesData, aes(x = factor(zipcode), y = price))+geom_boxplot()
g
```
Programatically extract the zipcode with the largest standard deviation
```{r}
require(reshape2)
meltedSales <- melt(data = salesData, id.vars = "zipcode", measure.vars = "price")
zipcodes <- unique(x = meltedSales$zipcode)
devs<-as.vector("numeric")
count <- 0
for (i in zipcodes){
count <- count + 1
print(count)
devs[count]<-sd(as.numeric(meltedSales[zipcode==i,]$value))
}
devs
devs<-as.numeric(devs)
maxInd<-which.max(devs)
biggest_sd_zip <- zipcodes[maxInd]
mean(meltedSales[zipcode == biggest_sd_zip, ]$value)
```
require (read.csv)
salesData <- read.csv("/Users/varunboodram/Desktop/home_data.csv")
require(reshape2)
meltedSales <- melt(data = salesData, id.vars = "zipcode", measure.vars = "price")
zipcodes <- unique(x = meltedSales$zipcode)
devs<-as.vector("numeric")
count <- 0
for (i in zipcodes){
count <- count + 1
print(count)
devs[count]<-sd(as.numeric(meltedSales[zipcode==i,]$value))
}
devs
head(meltedSales)
zipcodes
devs
for (i in zipcodes){
count <- count + 1
print(count)
devs[count]<-sd(as.numeric(meltedSales[zipcode==i,]$value))
}
head(meltedSales)
for (i in zipcodes){
count <- count + 1
print(count)
devs[count]<-sd(as.numeric(meltedSales["zipcode"==i,]$value))
}
devs
meltedSales[zipcode == zipcodes[1],]
meltedSales[zipcode == zipcodes[1],]
meltedSales["zipcode" == zipcodes[1],]
zipcodes[1]
meltedSales[meltedSales$zipcode==zipcodes[1],]
meltedSales[meltedSales$zipcode==zipcodes[1],]$value
class(meltedSales[meltedSales$zipcode==zipcodes[1],]$value)
for (i in zipcodes){
count <- count + 1
print(count)
devs[count]<-sd(meltedSales[meltedSales$zipcode==zipcodes[1],]$value))
}
for (i in zipcodes){
count <- count + 1
print(count)
devs[count]<-sd(meltedSales[meltedSales$zipcode==zipcodes[1],]$value)
}
devs
devs<-as.numeric(devs)
devs
meltedSales <- melt(data = salesData, id.vars = "zipcode", measure.vars = "price")
zipcodes <- unique(x = meltedSales$zipcode)
devs<-as.vector("numeric")
count <- 0
for (i in zipcodes){
count <- count + 1
print(count)
devs[count]<-sd(meltedSales[meltedSales$zipcode==zipcodes[1],]$value)
}
devs
zipcodes <- unique(x = meltedSales$zipcode)
devs<-as.vector("numeric")
count <- 0
for (i in zipcodes){
count <- count + 1
print(count)
devs[count]<-sd(meltedSales[meltedSales$zipcode==i,]$value)
}
devs
devs<-as.numeric(devs)
devs
maxInd<-which.max(devs)
biggest_sd_zip <- zipcodes[maxInd]
mean(meltedSales[zipcode == biggest_sd_zip, ]$value)
mean(meltedSales["zipcode" == biggest_sd_zip, ]$value)
mean(meltedSales[meltedSales$zipcode == biggest_sd_zip, ]$value)
names(salesData)
salesData[which("sqft_living">=2000 & "sqft_living"<=4000)]
subset(salesData, "sqft_living">=2000 & "sqft_living"<=4000)
subset(salesData, sqft_living>=2000 & sqft_living<=4000)
head(subset(salesData, sqft_living>=2000 & sqft_living<=4000))
nrow(subset(salesData, sqft_living>=2000 & sqft_living<=4000))/nrow(salesData)
require("carret")
install.packages("carret")
install.packages("caret")
library("caret")
set.seed()
set.seed(0)
training <- createDataPartition(salesData, .8)
?createDataPartition
training <- createDataPartition(salesData$sqft_living, p =  .8, list = F)
head(training)
train_Data <- salesData[training, ]
head(train_Data)
?lm
fit<-lm(formula = price~sqft_living, data = train_Data)
summary(fit)
test_Data <- salesData[-training, ]
predictions<-predict(object = fit, newdata = test_Data)
predictions
confusionMatrix(data = predictions, test_Data$price)
summary(predictions)
plot(sqft_living, price, data = salesData)
plot(sqft_living~price, data = salesData)
plot(price~sqft_living, data = salesData)
fit<-lm(price~sqft_living, data = train_Data)
summary(fit)
set.seed(0)
fit<-lm(price~sqft_living, data = train_Data)
summary(fit)
abline(fit)
abline(fit, color ="red")
abline(fit, col ="red")
predict(fit, newdata = train_Data, interval = "confidence")
preds<-predict(fit, newdata = train_Data, interval = "confidence")
head(preds)
rmse <- function(error)
{
sqrt(mean(error^2))
}
head(preds)
preds$fit
head(preds[fit])
preds<-predict(fit, newdata = train_Data)
head(preds)
error<-preds-train_Data$price
head(error)
rsme(error)
rmse(error)
nrow(subset(salesData, sqft_living>=2000 & sqft_living<=4000))/nrow(salesData)
require (read.csv)
salesData <- read.csv("/Users/varunboodram//Volumes/Media and Stuff/code/coursera MLS/home_data.csv")
require (read.csv)
salesData <- read.csv("/Users/varunboodram/Volumes/Media and Stuff/code/coursera MLS/home_data.csv")
require (read.csv)
salesData <- read.csv("/Volumes/Media and Stuff/code/coursera MLS/home_data.csv")
biggest_sd_zip
require(reshape2)
meltedSales <- melt(data = salesData, id.vars = "zipcode", measure.vars = "price")
zipcodes <- unique(x = meltedSales$zipcode)
avgs<-as.vector("numeric")
count <- 0
for (i in zipcodes){
count <- count + 1
print(count)
avgs[count]<-mean(meltedSales[meltedSales$zipcode==i,]$value)
}
avgs<-as.numeric(avgs)
maxInd<-which.max(avgs)
biggest_avg_price_zip <- zipcodes[maxInd]
mean(meltedSales[meltedSales$zipcode == biggest_avg_price_zip, ]$value)
require(reshape2)
meltedSales <- melt(data = salesData, id.vars = "zipcode", measure.vars = "price")
zipcodes <- unique(x = meltedSales$zipcode)
avgs<-as.vector("numeric")
count <- 0
for (i in zipcodes){
count <- count + 1
avgs[count]<-mean(meltedSales[meltedSales$zipcode==i,]$value)
}
avgs<-as.numeric(avgs)
maxInd<-which.max(avgs)
biggest_avg_price_zip <- zipcodes[maxInd]
mean(meltedSales[meltedSales$zipcode == biggest_avg_price_zip, ]$value)
require(reshape2)
meltedSales <- melt(data = salesData, id.vars = "zipcode", measure.vars = "price")
zipcodes <- unique(x = meltedSales$zipcode)
devs<-as.vector("numeric")
count <- 0
for (i in zipcodes){
print(count)
devs[count]<-sd(meltedSales[meltedSales$zipcode==i,]$value)
}
devs<-as.numeric(devs)
maxInd<-which.max(devs)
biggest_sd_zip <- zipcodes[maxInd]
mean(meltedSales[meltedSales$zipcode == biggest_sd_zip, ]$value)
log2(14)
log2(16)
log10(16)
install.packages("rPython")
install.packages("openintro")
data(cars)
dotPlot(cars$price, cars$type, key=c('large', 'midsize', 'small'), cex=1:3)
library(openintro)
data(cars)
dotPlot(cars$price, cars$type, key=c('large', 'midsize', 'small'), cex=1:3)
data(cars)
dotPlot(cars$price, cars$type, key=c( 'midsize'), cex=1:3)
data(cars)
dotPlot(cars$price, cars$type, key=c( 'midsize'), cex=1:3, col="blue")
data(run10)
layout(matrix(1:2,2), heights=c(2.7,1.5))
par(las=1)
these <- run10$gender=='M'
dotPlot(run10$time[these], run10$div[these],
col=fadeColor('black', '11'))
install.packages("RHadoop")
install.packages(c("rJava", "RJSONIO", "rmr", "rhdfs", "rhbase", "plyrmr"), repos="http://cran.r-project.org/")
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
r <- getOption('repos')
r$IRkernel <- 'http://irkernel.github.io/'
options(repos = r)
IRkernel::installspec(user = FALSE)
IRkernel::installspec()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')),
type = 'source')
IRkernel::installspec(user = FALSE)
ls()
rm(list = ls())
}
getdata<-function(fileUrl, dir, filename, ext){
# create directory, if it is not already present
dirName<-paste(dir, sep = "")
if(!file.exists(dirName)){
dir.create(path = dirName)
}
# Get the data, unless this step has already been done
dest<-paste("./", dirName,"/", filename, ext, sep = "")
if(!file.exists(dest)){
download.file(url = fileUrl,
destfile = dest,
method = "curl")
datedownloaded<-date()
}
dest
}
```
setwd("~/Desktop/Coursera-MLS-Multiple-regression")
for the
#        file.
# output : the path to the downloaded file
getdata<-function(fileUrl, dir, filename, ext){
# create directory, if it is not already present
dirName<-paste(dir, sep = "")
if(!file.exists(dirName)){
dir.create(path = dirName)
}
# Get the data, unless this step has already been done
dest<-paste("./", dirName,"/", filename, ext, sep = "")
if(!file.exists(dest)){
download.file(url = fileUrl,
destfile = dest,
method = "curl")
datedownloaded<-date()
}
dest
}
train_Url<-"https://eventing.coursera.org/api/redirectStrict/EP5KW-3NiyM18lcTGuOElb3V5Qb_M--Mb-jO57_m0hi9P_1zWKwsTnHDJ1gcfCx4-h_20m9fAGMll3KWPWTT3A.SOo__DI78gfS8hme27wo2A.aSyGgE88Vrtq2OLIUGBl7fWqm7vzhMuhJFplh8ZXFICsdpoBy6k2Ta9rqacJNlCnDbMuH_IjoxtVHi0pRT7jbz5FLAq7Xk_4WtmG88hAp1MnhoX62cOo5aqWxSMKZyMJtRq09fhfKNbL3oR9P12Z_OiPZYOuGCjcwbJ4DOQhWgpyzzQgOtmd_xwCEl8ef99czf2lpeLQTf_k56LlZPu10bbRrcq59JfDjGsMAQn6RJAVjA5bfGwVBXKDiueEzoTGLO-1K_vwvW5UUXJQnnjyVdEoDyfitFk5hOqkjNiKpI0xyzfULdWTKyw5jdHfOQcfiLn0iomklHXLzs4Yv7UYoLEL_PFW6Vznmciv1hokJBxHRaKdnbmrhSMxAR8rjd_lEA1SQn8ZPvX_NQz0iQuNNNMr0AGTYQonA67voaG0Z1Q3HDLx9tq5-Nki_I6LA9c-8d3DL0vz1R8RBT2kDhj3Yg"
temp<-getdata(fileUrl = train_Url, dir = "datasets", filename = "train_data", ext = ".zip")
train_data<-read.csv("./datasets/kc_house_train_data.csv", sep = ",", quote = " ", stringsAsFactors = T)
head(train_data)
train_data<-read.csv("./datasets/kc_house_train_data.csv", sep = ",", quote = " ", stringsAsFactors = F)
head(train_data)
train_data<-read.csv("./datasets/kc_house_train_data.csv", sep = ",", quote = " ", stringsAsFactors = T)
rm(train_Url)
dim(train_data)
train_data[!complete.cases(train_data)]
class(train_data[,1])
classes<-vector()
for (i in 1:ncol(train_data)){
classes[1]<-class(traindata[i,])
}
classes
classes<-vector()
for (i in 1:ncol(train_data)){
classes[1]<-class(train_data[i,])
}
classes
classes<-vector()
for (i in 1:ncol(train_data)){
classes[i]<-class(train_data[i,])
}
classes
classes<-vector()
for (i in 1:ncol(train_data)){
print(class(train_data[i,]))
classes[i]<-class(train_data[i,])
}
classes<-vector()
for (i in 1:ncol(train_data)){
print(class(train_data[,i]))
classes[i]<-class(train_data[,i])
}
classes
?float
train_data<-read.csv("./datasets/kc_house_train_data.csv", sep = ",", quote = " ", stringsAsFactors = F)
test_data<- read.csv("./datasets/kc_house_test_data.csv", sep = ",", quote = " ", stringsAsFactors = F)
dim(train_data)
train_data[!complete.cases(train_data)]
classes<-vector()
for (i in 1:ncol(train_data)){
classes[i]<-class(train_data[,i])
}
classes
train_data$bathrooms<-as.numeric(train_data$bathrooms)
train_data$waterfront<-as.integer(train_data$waterfront)
train_data$sqft_above<-as.integer(train_data$sqft_above)
train_data$sqft_living15<-as.numeric(train_data$sqft_living15)
train_data$grade<-as.integer(train_data$grade)
train_data$yr_renovated<-as.integer(train_data$yr_renovated)
train_data$price<-as.numeric(train_data$price)
train_data$bedrooms<-as.numeric(train_data$bedrooms)
train_data$zipcode<-as.character(train_data$zipcode)
train_data$long<-as.numeric(train_data$long)
train_data$sqft_lot15<-as.numeric(train_data$sqft_lot15)
train_data$sqft_living<-as.numeric(train_data$sqft_living)
train_data$floors<-as.character(train_data$floors)
train_data$condition<-as.integer(train_data$condition)
train_data$lat<-as.numeric(train_data$lat)
train_data$date<-as.character(train_data$date)
train_data$sqft_basement<-as.integer(train_data$sqft_basement)
train_data$yr_built<-as.integer(train_data$yr_built)
train_data$id<-as.character(train_data$id)
train_data$sqft_lot<-as.integer(train_data$sqft_lot)
train_data$view<-as.integer(train_data$view)
classes<-vector()
for (i in 1:ncol(train_data)){
classes[i]<-class(train_data[,i])
}
classes
q()
