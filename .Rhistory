col="red",
pch = 20,
type = "l",
lwd=3)
plot(x = generated_data$power_1,
y = sales$price,
xlab = "Square Feet",
ylab = "House Price",
main = "15th degree polynomial fit to subset 1")
points(x = generated_data$power_1,
y = fitted(model[2]),
col="red",
pch = 20,
type = "l",
lwd=3)
plot(x = generated_data$power_1,
y = sales$price,
xlab = "Square Feet",
ylab = "House Price",
main = "15th degree polynomial fit to subset 1")
points(x = generated_data$power_1,
y = fitted(model[15]),
col="red",
pch = 20,
type = "l",
lwd=3)
model15
models[15]
models[[15]]
build <- function(dataframe, feature, output, degree){
sales <- tie_Break(dataframe = dataframe,
feature = feature,
output = output)
generated_data <- poly_dataframe(dataframe = dataframe,
feature = feature,
degree = degree)
generated_data <- cbind(generated_data, sales[[output]])
colnames(generated_data)[ncol(generated_data)] <- output
model <- lm(formula = generated_data[[output]]~., data = generated_data)
model
}
models <- list()
for (i in 1:15){
models[[i]]<- build(dataframe = train_data, feature = "sqft_living", output = "price", degree = i)
}
models
plot(x = generated_data$power_1,
y = sales$price,
xlab = "Square Feet",
ylab = "House Price",
main = "15th degree polynomial fit to subset 1")
points(x = generated_data$power_1,
y = fitted(model[[15]]),
col="red",
pch = 20,
type = "l",
lwd=3)
plot(x = generated_data$power_1,
y = sales$price,
xlab = "Square Feet",
ylab = "House Price",
main = "15th degree polynomial fit to subset 1")
points(x = generated_data$power_1,
y = fitted(models[[15]]),
col="red",
pch = 20,
type = "l",
lwd=3)
plot(x = generated_data$power_1,
y = sales$price,
xlab = "Square Feet",
ylab = "House Price",
main = "15th degree polynomial fit to subset 1")
points(x = generated_data$power_1,
y = fitted(models[[1]]),
col="red",
pch = 20,
type = "l",
lwd=3)
points(x = generated_data$power_1,
y = fitted(models[[1]]),
col="red",
pch = 20,
type = "l",
lwd=3)
models[[1]]
build <- function(dataframe, feature, output, degree){
sales <- tie_Break(dataframe = dataframe,
feature = feature,
output = output)
generated_data <- poly_dataframe(dataframe = dataframe,
feature = feature,
degree = degree)
generated_data <- cbind(generated_data, sales[[output]])
colnames(generated_data)[ncol(generated_data)] <- output
model <- lm(formula = generated_data[[output]]~., data = generated_data)
model
}
models <- list()
for (i in 1:15){
models[[i]]<- build(dataframe = train_data, feature = "sqft_living", output = "price", degree = i)
plot(x = generated_data$power_1,
y = sales$price,
xlab = "Square Feet",
ylab = "House Price",
main = "15th degree polynomial fit to subset 1")
points(x = generated_data$power_1,
y = fitted(models[[i]]),
col="red",
pch = 20,
type = "l",
lwd=3)
}
build <- function(dataframe, feature, output, degree){
sales <- tie_Break(dataframe = dataframe,
feature = feature,
output = output)
generated_data <- poly_dataframe(dataframe = dataframe,
feature = feature,
degree = degree)
generated_data <- cbind(generated_data, sales[[output]])
colnames(generated_data)[ncol(generated_data)] <- output
model <- lm(formula = generated_data[[output]]~., data = generated_data)
model
}
models <- list()
for (i in 1:15){
models[[i]]<- build(dataframe = train_data, feature = "sqft_living", output = "price", degree = i)
plot(x = generated_data$power_1,
y = sales$price,
xlab = "Square Feet",
ylab = "House Price",
main = "15th degree polynomial fit to subset 1")
points(x = generated_data$power_1,
y = fitted(models[[i]]),
col="red",
pch = 20,
type = "l",
lwd=3)
}
plot(x = generated_data$power_1,
y = sales$price,
xlab = "Square Feet",
ylab = "House Price",
main = "15th degree polynomial fit to subset 1")
model<-model[[2]]
model
head(model)
model[[2]]
model<-models[[2]]
model
points(x = generated_data$power_1,
y = fitted(models[[i]]$coefficients),
col="red",
pch = 20,
type = "l",
lwd=3)
models[[2]]$coefficients
models[[2]]$fitted.values
points(x = generated_data$power_1,
y = fitted(models[[i]]$fitted.values),
col="red",
pch = 20,
type = "l",
lwd=3)
models[[i]]$fitted.values
points(x = generated_data$power_1,
y = models[[i]]$fitted.values,
col="red",
pch = 20,
type = "l",
lwd=3)
points(x = generated_data$power_1,
y = models[[i]]$fitted.values,
col="red",
pch = 20,
type = "l",
lwd=3)
i
i<-1
models[[i]]<- build(dataframe = train_data, feature = "sqft_living", output = "price", degree = i)
plot(x = generated_data$power_1,
y = sales$price,
xlab = "Square Feet",
ylab = "House Price",
main = "15th degree polynomial fit to subset 1")
points(x = generated_data$power_1,
y = models[[i]]$fitted.values,
col="red",
pch = 20,
type = "l",
lwd=3)
models
plot(x = generated_data$power_1,
y = sales$price,
xlab = "Square Feet",
ylab = "House Price",
main = "15th degree polynomial fit to subset 1")
generated_data <- poly_dataframe(dataframe = dataframe,
feature = feature,
degree = degree)
head(generated_data)
generated_data <- cbind(generated_data, sales[[output]])
head(generated_data)
colnames(generated_data)[ncol(generated_data)] <- output
head(generated_data)
model <- lm(formula = generated_data[[output]]~., data = generated_data)
plot(x = generated_data$power_1,
y = sales$price,
xlab = "Square Feet",
ylab = "House Price",
main = "15th degree polynomial fit to subset 1")
points(x = generated_data$power_1,
y = fitted(model),
col="red",
pch = 20,
type = "l",
lwd=3)
model
model3
model <- lm(formula = price~., data = generated_data)
model
plot(x = generated_data$power_1,
y = sales$price,
xlab = "Square Feet",
ylab = "House Price",
main = "15th degree polynomial fit to subset 1")
points(x = generated_data$power_1,
y = fitted(model),
col="red",
pch = 20,
type = "l",
lwd=3)
plot(x = generated_data$power_1,
y = sales$price,
xlab = "Square Feet",
ylab = "House Price",
main = "15th degree polynomial fit to subset 1")
points(x = generated_data$power_1,
y = fitted(model),
col="red",
pch = 20,
type = "l",
lwd=3)
i<^1
i<-1
degree
degree<-1
sales <- tie_Break(dataframe = dataframe,
feature = feature,
output = output)
generated_data <- poly_dataframe(dataframe = dataframe,
feature = feature,
degree = degree)
generated_data <- cbind(generated_data, sales[[output]])
colnames(generated_data)[ncol(generated_data)] <- output
model <- lm(formula = price~., data = generated_data)
model
plot(x = generated_data$power_1,
y = sales$price,
xlab = "Square Feet",
ylab = "House Price",
main = "15th degree polynomial fit to subset 1")
points(x = generated_data$power_1,
y = fitted(model),
col="red",
pch = 20,
type = "l",
lwd=3)
sales <- tie_Break(dataframe = train_data,
feature = "sqft_living",
output = "price")
head(sales)
sales <- tie_Break(dataframe = train_data,
feature = "sqft_living",
output = "price")
for (i in 1:15){
model<-lm(formula = price~poly(sqft_living, i), sales)
model
}
sales <- tie_Break(dataframe = train_data,
feature = "sqft_living",
output = "price")
for (i in 1:15){
model<-lm(formula = price~poly(sqft_living, i), sales)
return(model)
}
sales <- tie_Break(dataframe = train_data,
feature = "sqft_living",
output = "price")
for (i in 1:15){
model<-lm(formula = price~poly(sqft_living, i), sales)
print(model)
}
sales <- tie_Break(dataframe = train_data,
feature = "sqft_living",
output = "price")
for (i in 1:15){
model<-lm(formula = price~poly(sqft_living, i),
data =  sales)
print(model)
plot(x = sales$sqft_living, y = sales$price)
}
sales <- tie_Break(dataframe = train_data,
feature = "sqft_living",
output = "price")
for (i in 1:15){
model<-lm(formula = price~poly(sqft_living, i),
data =  sales)
print(model)
plot(x = sales$sqft_living, y = sales$price)
points(x = sales$sqft_living, y = fitted(model))
}
predictions<-predict(object = model,
newdata = validation_data)
resid(predictions)
predictions
residuals((predictions))
sales <- tie_Break(dataframe = train_data,
feature = "sqft_living",
output = "price")
RSS<-vector()
for (i in 1:15){
model<-lm(formula = price~poly(sqft_living, i),
data =  sales)
print(model)
plot(x = sales$sqft_living, y = sales$price)
predictions<-predict(object = model,
newdata = validation_data)
residuals<-predictions-validation_data$price
RSS[i]<-sum(residuals^2)
points(x = sales$sqft_living, y = fitted(model), type = "l", lwd=3, col="red")
}
sales <- tie_Break(dataframe = train_data,
feature = "sqft_living",
output = "price")
RSS<-vector()
for (i in 1:15){
model<-lm(formula = price~poly(sqft_living, i),
data =  sales)
print(model)
plot(x = sales$sqft_living, y = sales$price)
predictions<-predict(object = model,
newdata = validation_data)
residuals<-predictions-validation_data$price
RSS[i]<-sum(residuals^2)
points(x = sales$sqft_living, y = fitted(model), type = "l", lwd=3, col="red")
RSS
}
RSS
sales <- tie_Break(dataframe = train_data,
feature = "sqft_living",
output = "price")
RSS<-vector()
for (i in 1:15){
model<-lm(formula = price~poly(sqft_living, i),
data =  sales)
plot(x = sales$sqft_living, y = sales$price, xlab = "Square Feet Living", ylab = "House Price", main = paste("Polynomial fit to the training data of degree", i, sep = " "))
points(x = sales$sqft_living,
y = fitted(model),
type = "l",
lwd=3,
col="red")
predictions<-predict(object = model,
newdata = validation_data)
residuals<-predictions-validation_data$price
RSS[i]<-sum(residuals^2)
}
which.min(RSS)
model<-lm(formula = price~poly(sqft_living, 5),
data =  sales)
predictions<-predict(object = model,
newdata = test_data)
residuals<-predictions-validation_data$price
RSS<-sum(residuals^2)
model<-lm(formula = price~poly(sqft_living, 5),
data =  sales)
predictions<-predict(object = model,
newdata = test_data)
residuals<-predictions-test_data$price
RSS<-sum(residuals^2)
RSS
sales <- tie_Break(dataframe = train_data,
feature = "sqft_living",
output = "price")
RSS<-vector()
for (i in 1:15){
model<-lm(formula = price~poly(sqft_living, i),
data =  sales)
plot(x = sales$sqft_living, y = sales$price, xlab = "Square Feet Living", ylab = "House Price", main = paste("Polynomial fit to the training data of degree", i, sep = " "))
points(x = sales$sqft_living,
y = fitted(model),
type = "l",
lwd=3,
col="red")
predictions<-predict(object = model,
newdata = validation_data)
residuals<-predictions-validation_data$price
RSS[i]<-sum(residuals^2)
}
which.min(RSS)
RSS
plot(RSS, length(RSS))
head(sales)
plot( length(RSS), RSS)
length(RSS)
RSS
plot( 1:length(RSS), RSS)
plot( 1:length(RSS), RSS, "l")
which.min(RSS)
model<-lm(formula = price~poly(sqft_living, 4),
data =  sales)
predictions<-predict(object = model,
newdata = test_data)
residuals<-predictions-test_data$price
RSS<-sum(residuals^2)
RSS
model<-lm(formula = price~poly(sqft_living, 5),
data =  sales)
predictions<-predict(object = model,
newdata = test_data)
residuals<-predictions-test_data$price
RSS<-sum(residuals^2)
RSS
model<-lm(formula = price~poly(sqft_living, 3),
data =  sales)
predictions<-predict(object = model,
newdata = test_data)
residuals<-predictions-test_data$price
RSS<-sum(residuals^2)
RSS
sales <- tie_Break(dataframe = train_data,
feature = "sqft_living",
output = "price")
polydf<-poly_dataframe(dataframe = sales,
feature = "sqft_living",
degree = i)
head(polydf)
polydata<-cbind(polydf, sales$price)
head(polydf)
polydf<-poly_dataframe(dataframe = sales,
feature = "sqft_living",
degree = i)
polydf<-cbind(polydf, sales$price)
colnames(polydata[ncol(polydf)])<-"price"
polydf
head(polydf)
colnames(polydata[ncol(polydf)])<-"price"
head(polydf)
ncol(polydf)
colnames(polydata[16])<-"price"
head(polydf)
polydf<-poly_dataframe(dataframe = sales,
feature = "sqft_living",
degree = i)
polydf<-cbind(polydf, sales$price)
colnames(polydata)[ncol(polydf)]<-"price"
head(polydf)
polydf<-poly_dataframe(dataframe = sales,
feature = "sqft_living",
degree = i)
polydf<-cbind(polydf, sales$price)
colnames(polydf)[ncol(polydf)]<-"price"
head(polydf)
sales <- tie_Break(dataframe = train_data,
feature = "sqft_living",
output = "price")
RSS<-vector()
for (i in 1:15){
polydf<-poly_dataframe(dataframe = sales,
feature = "sqft_living",
degree = i)
polydf<-cbind(polydf, sales$price)
colnames(polydf)[ncol(polydf)]<-"price"
model<-lm(price~., data = polydf)
predictions<-predict(object = model, newdata = validation_data)
residuals<-validation_data$price-predictions
RSS[i]<-sum(residuals^2)
}
which.min(RSS)
validation_df<-poly_dataframe(dataframe = validation,
feature = "sqft_living",
degree = i)
validation<- tie_Break(dataframe = validation_data, feature = "sqft_living", output = "price")
validation_df<-poly_dataframe(dataframe = validation,
feature = "sqft_living",
degree = i)
head(validation)
head(validation_df)
sales <- tie_Break(dataframe = train_data,
feature = "sqft_living",
output = "price")
validation<- tie_Break(dataframe = validation_data, feature = "sqft_living", output = "price")
RSS<-vector()
for (i in 1:15){
polydf<-poly_dataframe(dataframe = sales,
feature = "sqft_living",
degree = i)
validation_df<-poly_dataframe(dataframe = validation,
feature = "sqft_living",
degree = i)
polydf<-cbind(polydf, sales$price)
validation_df<-cbind(validation_df, validation$price)
colnames(polydf)[ncol(polydf)]<-"price"
colnames(validation_df)[ncol(validation_df)]<-"price"
model<-lm(price~., data = polydf)
predictions<-predict(object = model, newdata = validation_df)
residuals<-validation_df$price-predictions
RSS[i]<-sum(residuals^2)
}
which.min(RSS)
RSS
